import numpy as np
print("hello from  - START........................................................................")
def my_func(a):
    print("a from  is ..........................................................................................")
    #print(a)
    a[:,0]=a[:,0]  #H2
    a[:,1]=(a[:,1]-0)/(2e7) #P
    a[:,2]=-((a[:,2]+3.41e6)/(-1.03585e5+3.41e6)) #h
    

 
    W1 = np.
    

    fff1 = np.array([])
    f1 = np.array([])
    ff1 = np.array([])

    for i in range(0,100):
        f = np.maximum(0, W1[0, i] + W1[1, i] * a[:,0] +
                    W1[2, i] * a[:,1] + W1[3, i] * a[:,2])
        f1=np.append(f1,f)
    w1=np.reshape(f1, (-1, 25800))
    f2=np.transpose(w1)
    
     
        
            
            
    W2 = np.
    

    for i in range(0,100):
        ff = np.maximum(0, W2[0, i] + W2[1, i] * f2[:,0] + W2[2, i] * f2[:,1] + W2[3, i] * f2[:,2] +
                    W2[4, i] * f2[:,3] + W2[5, i] * f2[:,4] + W2[6, i] * f2[:,5] + W2[7, i] * f2[:,6]
                    + W2[8, i] * f2[:,7] + W2[9, i] * f2[:,8] + W2[10, i] * f2[:,9]+W2[11, i] * f2[:,10] + W2[12, i] * f2[:,11] + W2[13, i] * f2[:,12] +
                    W2[14, i] * f2[:,13] + W2[15, i] * f2[:,14] + W2[16, i] * f2[:,15] + W2[17, i] * f2[:,16]
                    + W2[18, i] * f2[:,17] + W2[19, i] * f2[:,18] + W2[20, i] * f2[:,19]+W2[21, i] * f2[:,20] + W2[22, i] * f2[:,21] + W2[23, i] * f2[:,22] +
                    W2[24, i] * f2[:,23] + W2[25, i] * f2[:,24] + W2[26, i] * f2[:,25] + W2[27, i] * f2[:,26]
                    + W2[28, i] * f2[:,27] + W2[29, i] * f2[:,28] + W2[30, i] * f2[:,29]+ W2[31, i] * f2[:,30] + W2[32, i] * f2[:,31] + W2[33, i] * f2[:,32] +
                    W2[34, i] * f2[:,33] + W2[35, i] * f2[:,34] + W2[36, i] * f2[:,35] + W2[37, i] * f2[:,36]
                    + W2[38, i] * f2[:,37] + W2[39, i] * f2[:,38] + W2[40, i] * f2[:,39]+W2[41, i] * f2[:,40] + W2[42, i] * f2[:,41] + W2[43, i] * f2[:,42] +
                    W2[44, i] * f2[:,43] + W2[45, i] * f2[:,44] + W2[46, i] * f2[:,45] + W2[47, i] * f2[:,46]
                    + W2[48, i] * f2[:,47] + W2[49, i] * f2[:,48] + W2[50, i] * f2[:,49]+W2[51, i] * f2[:,50] + W2[52, i] * f2[:,51] + W2[53, i] * f2[:,52] +
                    W2[54, i] * f2[:,53] + W2[55, i] * f2[:,54] + W2[56, i] * f2[:,55] + W2[57, i] * f2[:,56]
                    + W2[58, i] * f2[:,57] + W2[59, i] * f2[:,58] + W2[60, i] * f2[:,59]+ W2[61, i] * f2[:,60] + W2[62, i] * f2[:,61] + W2[63, i] * f2[:,62] +
                    W2[64, i] * f2[:,63] + W2[65, i] * f2[:,64] + W2[66, i] * f2[:,65] + W2[67, i] * f2[:,66]
                    + W2[68, i] * f2[:,67] + W2[69, i] * f2[:,68] + W2[70, i] * f2[:,69]+W2[71, i] * f2[:,70] + W2[72, i] * f2[:,71] + W2[73, i] * f2[:,72] +
                    W2[74, i] * f2[:,73] + W2[75, i] * f2[:,74] + W2[76, i] * f2[:,75] + W2[77, i] * f2[:,76]
                    + W2[78, i] * f2[:,77] + W2[79, i] * f2[:,78] + W2[80, i] * f2[:,79]+W2[81, i] * f2[:,80] + W2[82, i] * f2[:,81] + W2[83, i] * f2[:,82] +
                    W2[84, i] * f2[:,83] + W2[85, i] * f2[:,84] + W2[86, i] * f2[:,85] + W2[87, i] * f2[:,86]
                    + W2[88, i] * f2[:,87] + W2[89, i] * f2[:,88] + W2[90, i] * f2[:,89]+W2[91, i] * f2[:,90] + W2[92, i] * f2[:,91] + W2[93, i] * f2[:,92] +
                    W2[94, i] * f2[:,93] + W2[95, i] * f2[:,94] + W2[96, i] * f2[:,95] + W2[97, i] * f2[:,96]
                    + W2[98, i] * f2[:,97] + W2[99, i] * f2[:,98] + W2[100, i] * f2[:,99])
        ff1 = np.append(ff1, ff)
    w2=np.reshape(ff1, (-1, 25800))
    ff2=np.transpose(w2)

        

    W3 = np.
       
    fff = np.maximum(0, W3[0,0] + W3[1,0] * ff2[:,0] + W3[2,0] * ff2[:,1] + W3[3,0] * ff2[:,2] +
                W3[4,0] * ff2[:,3] + W3[5,0] * ff2[:,4] + W3[6,0] * ff2[:,5] + W3[7,0] * ff2[:,6]
                + W3[8,0] * ff2[:,7] + W3[9,0] * ff2[:,8] + W3[10,0] * ff2[:,9]+ W3[11,0] * ff2[:,10] + W3[12,0] * ff2[:,11] + W3[13,0] * ff2[:,12] +
                W3[14,0] * ff2[:,13] + W3[15,0] * ff2[:,14] + W3[16,0] * ff2[:,15] + W3[17,0] * ff2[:,16]
                + W3[18,0] * ff2[:,17] + W3[19,0] * ff2[:,18] + W3[20,0] * ff2[:,19]+W3[21,0] * ff2[:,20] + W3[22,0] * ff2[:,21] +
               W3[23,0] * ff2[:,22] + W3[24,0] * ff2[:,23] + W3[25,0] * ff2[:,24] + W3[26,0] * ff2[:,25] + W3[27,0] * ff2[:,26]
                + W3[28,0] * ff2[:,27] + W3[29,0] * ff2[:,28] + W3[30,0] * ff2[:,29]+W3[31,0] * ff2[:,30] + W3[32,0] * ff2[:,31] +W3[33,0] * ff2[:,32] +
                W3[34,0] * ff2[:,33] + W3[35,0] * ff2[:,34] + W3[36,0] * ff2[:,35] + W3[37,0] * ff2[:,36]
                + W3[38,0] * ff2[:,37] + W3[39,0] * ff2[:,38] + W3[40,0] * ff2[:,39]+ W3[41,0] * ff2[:,40] + W3[42,0] * ff2[:,41] + W3[43,0] * ff2[:,42] +
                W3[44,0] * ff2[:,43] + W3[45,0] * ff2[:,44] + W3[46,0] * ff2[:,45] + W3[47,0] * ff2[:,46]
                + W3[48,0] * ff2[:,47] + W3[49,0] * ff2[:,48] + W3[50,0] * ff2[:,49]+W3[51,0] * ff2[:,50] + W3[52,0] * ff2[:,51] +
               W3[53,0] * ff2[:,52] + W3[54,0] * ff2[:,53] + W3[55,0] * ff2[:,54] + W3[56,0] * ff2[:,55] + W3[57,0] * ff2[:,56]
                + W3[58,0] * ff2[:,57] + W3[59,0] * ff2[:,58] + W3[60,0] * ff2[:,59]+W3[61,0] * ff2[:,60] + W3[62,0] * ff2[:,61]+W3[63,0] * ff2[:,62] +
                W3[64,0] * ff2[:,63] + W3[65,0] * ff2[:,64] + W3[66,0] * ff2[:,65] + W3[67,0] * ff2[:,66]
                + W3[68,0] * ff2[:,67] + W3[69,0] * ff2[:,68] + W3[70,0] * ff2[:,69]+W3[71,0] * ff2[:,70] + W3[72,0] * ff2[:,71] +
               W3[73,0] * ff2[:,72] + W3[74,0] * ff2[:,73] + W3[75,0] * ff2[:,74] + W3[76,0] * ff2[:,75] + W3[77,0] * ff2[:,76]
                + W3[78,0] * ff2[:,77] + W3[79,0] * ff2[:,78] + W3[80,0] * ff2[:,79]+W3[81,0] * ff2[:,80] + W3[82,0] * ff2[:,81] +W3[83,0] * ff2[:,82] +
                W3[84,0] * ff2[:,83] + W3[85,0] * ff2[:,84] + W3[86,0] * ff2[:,85] + W3[87,0] * ff2[:,86]
                + W3[88,0] * ff2[:,87] + W3[89,0] * ff2[:,88] + W3[90,0] * ff2[:,89]+ W3[91,0] * ff2[:,90] + W3[92,0] * ff2[:,91] + W3[93,0] * ff2[:,92] +
                W3[94,0] * ff2[:,93] + W3[95,0] * ff2[:,94] + W3[96,0] * ff2[:,95] + W3[97,0] * ff2[:,96]
                + W3[98,0] * ff2[:,97] + W3[99,0] * ff2[:,98] + W3[100,0] * ff2[:,99])
    fff1 = np.append(fff1, fff)
    
        

     
    f_final = np.asarray(fff2).astype('float64')
    print("f_final for  is ......................................................")
    np.set_printoptions(threshold=np.inf)
#   print(f_final)       
    print("hello from  - END.......................................................")
    return f_final
